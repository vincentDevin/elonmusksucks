generator client {
  provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum PredictionType {
  MULTIPLE
  BINARY
  OVER_UNDER
}

enum BetOption {
  YES
  NO
  OVER
  UNDER
}

enum BetStatus {
  PENDING
  WON
  LOST
  REFUNDED
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum Theme {
  LIGHT
  DARK
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  name               String
  passwordHash       String
  emailVerified      Boolean             @default(false)
  emailVerifications EmailVerification[]
  passwordResets     PasswordReset[]
  profileComplete    Boolean             @default(false)
  role               Role                @default(USER)
  active             Boolean             @default(true)
  muskBucks          Int                 @default(1000)
  bets               Bet[]
  refreshTokens      RefreshToken[]
  userBadges         UserBadge[]         @relation("UserToUserBadge")
  followers          Follow[]            @relation("userFollowers")
  following          Follow[]            @relation("userFollowing")
  bio                String? // optional user bio
  avatarUrl          String? // URL to profile image
  location           String? // user-provided location
  timezone           String? // IANA timezone string
  // statistics (can be updated via triggers or backend logic)
  successRate        Float               @default(0.0)
  totalPredictions   Int                 @default(0)
  currentStreak      Int                 @default(0)
  longestStreak      Int                 @default(0)
  // user settings
  notifyOnResolve    Boolean             @default(true)
  theme              Theme               @default(LIGHT)
  twoFactorEnabled   Boolean             @default(false)
  createdAt          DateTime            @default(now())
  parlayes           Parlay[]
  transactions       Transaction[]
  feedPrivate        Boolean             @default(false)
  posts              UserPost[]          @relation("OwnerToPost")
  comments           UserPost[]          @relation("AuthorToPost")
  activities         UserActivity[]
  stats              UserStats?
  Prediction         Prediction[]
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Prediction {
  id          Int                @id @default(autoincrement())
  title       String
  description String
  category    String
  type        PredictionType     @default(MULTIPLE)
  threshold   Float?
  expiresAt   DateTime
  resolved    Boolean            @default(false)
  approved    Boolean            @default(false)
  resolvedAt  DateTime?
  winningOptionId Int?
  bets        Bet[]
  options     PredictionOption[]
  createdAt   DateTime           @default(now())
  creatorId   Int
  creator     User               @relation(fields: [creatorId], references: [id])

  @@index([expiresAt, resolved])
}

model PredictionOption {
  id           Int         @id @default(autoincrement())
  label        String
  odds         Float // decimal odds for this option
  prediction   Prediction  @relation(fields: [predictionId], references: [id], onDelete: Cascade)
  predictionId Int
  bets         Bet[]       @relation("OptionToBet")
  createdAt    DateTime    @default(now())
  parlayLegs   ParlayLeg[]
}

model Bet {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id])
  userId          Int
  prediction      Prediction        @relation(fields: [predictionId], references: [id])
  predictionId    Int
  amount          Int
  oddsAtPlacement Float? // snapshot of odds when placing the bet
  potentialPayout Int? // computed at placement: amount * oddsAtPlacement
  status          BetStatus         @default(PENDING)
  optionOption    PredictionOption? @relation("OptionToBet", fields: [optionId], references: [id])
  optionId        Int?
  won             Boolean? // null until resolved
  payout          Int? // null until resolved
  createdAt       DateTime          @default(now())
}

model AITweet {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  expiresAt DateTime
}

model LeaderboardEntry {
  userId         Int     @id     @map("user_id")
  userName       String  @map("user_name")
  avatarUrl      String? @map("avatar_url")
  balance        Int     @map("balance")
  totalBets      Int     @map("total_bets")
  winRate        Float   @map("win_rate")
  profitAll      Int     @map("profit_all")
  profitPeriod   Int     @map("profit_period")
  roi            Float   @map("roi")
  longestStreak  Int     @map("longest_streak")
  parlaysStarted Int     @map("parlays_started")
  parlaysWon     Int     @map("parlays_won")
  rankChange     Int?    @map("rank_change")

  @@map("leaderboard_view")
}

model Badge {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  iconUrl     String?
  users       UserBadge[] @relation("BadgeToUserBadge")
  createdAt   DateTime    @default(now())
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  user      User     @relation("UserToUserBadge", fields: [userId], references: [id])
  userId    Int
  badge     Badge    @relation("BadgeToUserBadge", fields: [badgeId], references: [id])
  badgeId   Int
  awardedAt DateTime @default(now())
  reason    String?

  @@unique([userId, badgeId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("userFollowing", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("userFollowers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Parlay {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  amount          Int
  combinedOdds    Float
  potentialPayout Int
  status          BetStatus   @default(PENDING)
  legs            ParlayLeg[]
  createdAt       DateTime    @default(now())
}

model ParlayLeg {
  id              Int              @id @default(autoincrement())
  parlay          Parlay           @relation(fields: [parlayId], references: [id], onDelete: Cascade)
  parlayId        Int
  option          PredictionOption @relation(fields: [optionId], references: [id])
  optionId        Int
  oddsAtPlacement Float
  createdAt       DateTime         @default(now())
}

model Transaction {
  id              Int             @id @default(autoincrement())
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  type            TransactionType
  amount          Int
  balanceAfter    Int
  relatedBetId    Int? // single bet
  relatedParlayId Int? // parlay bet
  createdAt       DateTime        @default(now())
}

model UserPost {
  id        Int        @id @default(autoincrement())
  author    User       @relation("AuthorToPost", fields: [authorId], references: [id])
  authorId  Int
  owner     User       @relation("OwnerToPost", fields: [ownerId], references: [id])
  ownerId   Int
  content   String
  parent    UserPost?  @relation("PostParent", fields: [parentId], references: [id])
  parentId  Int?
  children  UserPost[] @relation("PostParent")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model UserActivity {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String // e.g. "BET_PLACED", "BET_WON", "POST_CREATED", etc.
  details   Json? // Store event metadata (e.g., betId, predictionId, badgeId, postId)
  createdAt DateTime @default(now())
}

model UserStats {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  totalBets      Int      @default(0)
  betsWon        Int      @default(0)
  betsLost       Int      @default(0)
  parlaysStarted Int      @default(0)
  parlaysWon     Int      @default(0)
  totalWagered   Int      @default(0)
  totalWon       Int      @default(0)
  streak         Int      @default(0)
  maxStreak      Int      @default(0)
  profit         Int      @default(0)
  roi            Float    @default(0)
  mostCommonBet  String? // Optionally store e.g. "OVER", "YES", etc.
  biggestWin     Int      @default(0)
  updatedAt      DateTime @default(now()) @updatedAt
}
